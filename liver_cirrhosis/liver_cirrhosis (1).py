# -*- coding: utf-8 -*-
"""liver_cirrhosis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nysfSjJJUiwOi0M2FWn3m6ZiaGmclgCw
"""

import pandas as pd
import  numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('liver_cirrhosis.csv')
df.head(5)

# df.corr()['Stage'].sort_values(ascending=True)
df['Drug']=df['Drug'].apply(lambda x:
                   0 if x == 'Placebo'  else(1 if x=='D-penicillamine' else x))
df['Status']=df['Status'].apply(lambda x:
                   0 if x == 'C'  else(1 if x=='D' else(2 if x=='CL' else x)))

df['Status'].unique()

df.info()

df.corr()['Stage'].sort_values(ascending=True)
# df.drop()

df_new=df[['Hepatomegaly', 'Prothrombin','N_Days', 'Platelets','Albumin','Stage']]
df_new.isnull().sum()

for col in df_new.columns:
  plt.figure(figsize=(6,3))
  sns.boxplot(df[col])
  plt.title(f"{col} Outlier's")
  plt.show()

for col in df_new.columns:
  q1,q3=df_new[col].quantile(0.25),df_new[col].quantile(0.75)
  iqr=q3-q1
  upper_bound=q3+1.5*iqr
  lower_bound=q1-1.5*iqr
  df_new[col]=df_new[col].apply(lambda x:
                        upper_bound if x > upper_bound else(lower_bound if x< lower_bound else x))

for col in df_new.columns:
  plt.figure(figsize=(6,3))
  plt.title(f"{col} Distribution")
  sns.histplot(df[col],kde=1)
  plt.show()

x,y=df_new.drop('Stage',axis=1),df_new['Stage']
from sklearn.model_selection import train_test_split,GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix,  ConfusionMatrixDisplay,classification_report,accuracy_score
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.33,random_state=1)
model=DecisionTreeClassifier(criterion='gini')
model.fit(x_train,y_train)
# log_odds = model.coef_[0]
# important=pd.Series(log_odds,index=x.columns)
# important
y_pred=model.predict(x_test)
confuse=confusion_matrix(y_test,y_pred)
result=ConfusionMatrixDisplay(confuse)
result.plot(cmap=plt.cm.Blues)
print("Accuracy:", accuracy_score(y_test, y_pred))